# onLogin: acquire openid and sessionid and then put them in storage
- route: /auth/on_login
- method: POST
- request data:
    - code string
- response data:
    - openid string
    - sid string
- response status:
    - 200 success
    - 500 failure

# afterLogin: callback of onLogin; get userInfo through wx api
- route: /auth/after_login
- method: PUT
- request params:
    - openid string
    - sid string
- request data:
    - avatar string
    - gender int
    - nickname string
- response status:
    - 200 success
    - 201 success new user
    - 401 auth check fails
    - 500 failure

  -----------------------------------------
# Get one group
- route: /group/:group_id
- method: GET
- request params:
    - openid string
    - sid string
- respnose data:
    - creator_id string
    - name string
    - type int
    - users []User
    - update_time string # 上次小组内容更新时间，包括任务的更新
    - task_number int # 当前任务数，可能是针对个人的
- response status:
    - 200 success
    - 401 auth check fails
    - 500 failure

# Get group by userId
- route: /group
- method: GET
- request params:
    - openid stirng
    - sid string
- response data
  - group []Group # 需要完整的数据
- response status:
    - 200 success
    - 401 auth check fails
    - 500 failure

# Create group
- route: /group
- method: PUT
- request params:
    - openid string
    - sid string
- request data:
    - name string
    - user_ids []string
- response data:
    - id int
- response status:
    - 201 success
    - 401 auth check fails
    - 403 not allowed
    - 500 failure

# Update group
- route: /group/:group_id
- method: POST
- request params:
    - openid string
    - sid string
- request data:
    - id int
    - name string
- response status:
    - 200 success
    - 201 success group changed
    - 401 auth check fails
    - 403 not allowed
    - 500 failure

# Delete group
- route: /group/:group_id
- method: DELETE
- request params:
    - openid string
    - sid string
- request data:
    - id int
- response status:
    - 200 success
    - 401 auth check fails
    - 403 not allowed
    - 500 failure

-----------------------------------------
# Get one task
- route: /task/:task_id/meta
- method: GET
- request params:
    - openid string
    - sid string
- response data:
    - name string
    - type int
    - done bool
    - group_id int
    - publisher_id string
    - leader_id string
    - start_date string
    - end_date string
    - readonly bool
    - description string
- response status:
    - 200 success
    - 401 auth check fails
    - 403 not allowed
    - 500 failure

# Get worker of the task
- route: /task/:task_id/workers
- method: GET
- request params:
    - openid string
    - sid string
- response data:
    - workers []User # done, done time, id, name
- response status:
    - 200 success
    - 401 auth check fails
    - 403 not allowed
    - 500 failure

# Get task content # tbd # advanced
- route: /task/:task_id/content
- method: GET
    - request params:
        - openid string
        - sid string
        - version int
    - response data:
        - content string
        - modifier []string
        - updated_at string
        - created_at string
        - diff string
    - response status:
        - 200 success
        - 401 auth check fails
        - 403 not allowed
        - 500 failure

# Get tasks by groupID; the route is actually a compromise on gin router
- route: /task/:group_id/group
- method: GET
- request params:
    - openid string
    - sid string
- response data:
    - task []Task # meta
- response status:
    - 200 success
    - 401 auth check fails
    - 403 not allowed
    - 500 failure


# Create task
- route: /task
- method: PUT
- request params:
    - openid string
    - sid string
- request data:
    - group_id int
    - user_ids []string
    - name string
    - type int
    - leader_id # tbd
    - start_date string: # format: 2020-02-02
    - end_date string
    - description string
- response data:
    - id int
- response status:
    - 200 success
    - 201 success created
    - 400 wrong request format
    - 401 auth check fails
    - 403 not allowed
    - 500 failure

# Update a task; only update meta value; contents update would be implemented in next sprint
- route: /task/:task_id/meta
- method: POST
- request params:
    - openid string
    - sid string
- request data:
    - name string
    - start_date string
    - end_date string
    - readonly bool
    - description string
    - done bool
- response status:
    - 200 success
    - 201 success updated
    - 400 wrong request format
    - 401 auth check fails
    - 403 not allowed
    - 500 failure

# Update data content; advanced feature
- route: /task/:task_id
- method: POST
- request params:
    - openid string
    - sid string
...

# Delete task
- route: /tasks/:task_id
- method: DELETE
- request params:
    - openid string
    - sid string
- response status:
    - 200 success
    - 201 success deleted
    - 401 auth check fails
    - 403 not allowed
    - 500 failure

