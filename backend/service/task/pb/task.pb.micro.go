// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: task.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Task service

type TaskService interface {
	GetTaskMeta(ctx context.Context, in *GetTaskMetaRequest, opts ...client.CallOption) (*GetTaskMetaResponse, error)
	GetTaskPeolple(ctx context.Context, in *GetTaskPeopleRequset, opts ...client.CallOption) (*GetTaskPeopleResponse, error)
	GetTaskMetaByGroupId(ctx context.Context, in *GetTaskMetaByGroupIdRequest, opts ...client.CallOption) (*GetTaskMetaByGroupIdResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "task"
	}
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) GetTaskMeta(ctx context.Context, in *GetTaskMetaRequest, opts ...client.CallOption) (*GetTaskMetaResponse, error) {
	req := c.c.NewRequest(c.name, "Task.GetTaskMeta", in)
	out := new(GetTaskMetaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetTaskPeolple(ctx context.Context, in *GetTaskPeopleRequset, opts ...client.CallOption) (*GetTaskPeopleResponse, error) {
	req := c.c.NewRequest(c.name, "Task.GetTaskPeolple", in)
	out := new(GetTaskPeopleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetTaskMetaByGroupId(ctx context.Context, in *GetTaskMetaByGroupIdRequest, opts ...client.CallOption) (*GetTaskMetaByGroupIdResponse, error) {
	req := c.c.NewRequest(c.name, "Task.GetTaskMetaByGroupId", in)
	out := new(GetTaskMetaByGroupIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error) {
	req := c.c.NewRequest(c.name, "Task.CreateTask", in)
	out := new(CreateTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Task service

type TaskHandler interface {
	GetTaskMeta(context.Context, *GetTaskMetaRequest, *GetTaskMetaResponse) error
	GetTaskPeolple(context.Context, *GetTaskPeopleRequset, *GetTaskPeopleResponse) error
	GetTaskMetaByGroupId(context.Context, *GetTaskMetaByGroupIdRequest, *GetTaskMetaByGroupIdResponse) error
	CreateTask(context.Context, *CreateTaskRequest, *CreateTaskResponse) error
}

func RegisterTaskHandler(s server.Server, hdlr TaskHandler, opts ...server.HandlerOption) error {
	type task interface {
		GetTaskMeta(ctx context.Context, in *GetTaskMetaRequest, out *GetTaskMetaResponse) error
		GetTaskPeolple(ctx context.Context, in *GetTaskPeopleRequset, out *GetTaskPeopleResponse) error
		GetTaskMetaByGroupId(ctx context.Context, in *GetTaskMetaByGroupIdRequest, out *GetTaskMetaByGroupIdResponse) error
		CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error
	}
	type Task struct {
		task
	}
	h := &taskHandler{hdlr}
	return s.Handle(s.NewHandler(&Task{h}, opts...))
}

type taskHandler struct {
	TaskHandler
}

func (h *taskHandler) GetTaskMeta(ctx context.Context, in *GetTaskMetaRequest, out *GetTaskMetaResponse) error {
	return h.TaskHandler.GetTaskMeta(ctx, in, out)
}

func (h *taskHandler) GetTaskPeolple(ctx context.Context, in *GetTaskPeopleRequset, out *GetTaskPeopleResponse) error {
	return h.TaskHandler.GetTaskPeolple(ctx, in, out)
}

func (h *taskHandler) GetTaskMetaByGroupId(ctx context.Context, in *GetTaskMetaByGroupIdRequest, out *GetTaskMetaByGroupIdResponse) error {
	return h.TaskHandler.GetTaskMetaByGroupId(ctx, in, out)
}

func (h *taskHandler) CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error {
	return h.TaskHandler.CreateTask(ctx, in, out)
}
