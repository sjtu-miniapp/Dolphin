syntax = "proto3";
option go_package = ".;pb";
package pb;

//import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Auth protobuf";
    version: "1";
    contact: {
      name: "Dolphin project";
      url: "https://github.com/sjtu-miniapp/Dolphin/";
    };
  };
};


service AuthService {
  // insert user id
  rpc onLogin(OnLoginRequest) returns (OnLoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/onLogin"
      body: "*"
    };
  }
  // update user name gender, create self_group
  rpc afterLogin(AfterLoginRequest) returns (AfterLoginResponse) {
    option (google.api.http) = {
      put: "/api/v1/afterLogin"
      body: "*"
    };
  }

  rpc getUser(GetUserRequest) returns (GetUserResponse) {
      option (google.api.http) = {
        get: "/api/v1/user/{id}"
      };
  }

  // not used for http request
  rpc checkAuth(CheckAuthRequest) returns (CheckAuthResponse);

  // getOpenId ?
}

message OnLoginRequest {
    string code = 1;
}

message OnLoginResponse {
    // encrypied openid
    string id = 1;
    // pass session id for all requests
    string sid = 2;
}

message AfterLoginRequest {
  string id = 1;
  string name = 2;
  // 0 male 1 female
  uint32 gender = 3;
  string sid = 4;
}

message AfterLoginResponse {
  int32 err = 1;
}


message GetUserRequest {
    string id = 1;
}

message GetUserResponse {
    string name = 1;
    uint32 gender = 2;
}

message CheckAuthRequest {
    string id = 1;
    string sid = 2;
}

message CheckAuthResponse {
    bool ok = 1;
}
